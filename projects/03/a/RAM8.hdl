// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    // MEMO: outは(read/writeに関わらず,)addressで指定したmemoryのdataを
    // 取ってくる.
    OUT out[16];

    PARTS:
        // MEMO: どのaddressに対する操作なのかを特定する処理.
        // 1つのものを多数にふり分けるからDMux. こういう使い方なのかー.
        DMux8Way (in=load, sel=address, a=a, b=b, c=c, d=d, e=e, f=f, g=g, h=h);
        Register (in=in, load=a, out=r1);
        Register (in=in, load=b, out=r2);
        Register (in=in, load=c, out=r3);
        Register (in=in, load=d, out=r4);
        Register (in=in, load=e, out=r5);
        Register (in=in, load=f, out=r6);
        Register (in=in, load=g, out=r7);
        Register (in=in, load=h, out=r8);
        // MEMO: 今度は多数のものから洗濯して取ってくるのでMux.
        Mux8Way16 (a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8, sel=address, out=out);
}